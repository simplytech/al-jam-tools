#*****************************************************************************#
# File   : step.jam                                                           #
# Author : Alain Achkar                                                       #
# Summary: Rules related to a step.                                           #
#*****************************************************************************#

#=============================================================================#
#       ***             G L O B A L   V A R I A B L E S      ***              #
#=============================================================================#

#=============================================================================# 
#                   ***   P S E U D O - T A R G E T S   ***                   # 
#=============================================================================# 

#=============================================================================#
#       ***   R U L E   &   A C T I O N S   D E F I N I T I O N S   ***       #
#=============================================================================#

#-----------------------------------------------------------------------------#
#                                    Step                                     #
#-----------------------------------------------------------------------------#

#rule Step ( step_name : commands * )
#{
#  DebugVars step_name : commands ;
#
#  step_common $(step_name) : $(commands) ;
#}
#
#actions Step
#{
#  #echo actions Step: $(1) ;
#  #echo actions Step: $(2) ;
#  #echo "bash\> $(2)"
#  $(2) ;
#}

#-----------------------------------------------------------------------------#
#                                     Sh                                      #
#-----------------------------------------------------------------------------#

# Shell commands
rule Sh ( step_name : commands * )
{
  DebugVars step_name : commands ;

  step_common $(step_name) : $(commands) ;
  
  JAMSHELL on $(step_name) = /bin/bash -c % ;     # NON-INTERACTIVE SHELL
}

# The space between $(2) and ' is very important!
actions Sh
{
#!/usr/bin/env sh
echo 'bash> $(2) '
            $(2)
}


# Sh interactive
rule Shi ( step_name : commands * )
{
  DebugVars step_name : commands ;

  step_common $(step_name) : $(commands) ;
  
  JAMSHELL on $(step_name) = /bin/bash -i -c % ; # INTERACTIVE SHELL
}

# The space between $(2) and ' is very important!
actions Shi
{
#!/usr/bin/env sh
echo 'bash> $(2) '
echo 'Press <ENTER> to execute the command or <Ctrl-C> to abort.'
read x
            $(2)
}


#-----------------------------------------------------------------------------#
#                                   Rails                                     #
#-----------------------------------------------------------------------------#

# Rails commands
rule Rails ( step_name : commands * )
{
  DebugVars step_name : commands ;

  step_common $(step_name) : $(commands) ;
  
#  JAMSHELL on $(step_name) = $(PROJECT_ROOT)/$(RAILS_APP)/script/runner % ;
  JAMSHELL on $(step_name) = /bin/bash -c % ;     # NON-INTERACTIVE SHELL
}

actions Rails
{
#!/usr/bin/env $(PROJECT_ROOT)/$(RAILS_APP)/script/runner
puts 'Rails>' + <<EOF
$(2)
EOF
$(2)
}

#=============================================================================#
#                 ***   R U L E   I N V O C A T I O N S   ***                 #
#=============================================================================#

